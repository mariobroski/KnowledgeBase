services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-rag_system}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/rag_system}
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      JANUSGRAPH_HOST: ${JANUSGRAPH_HOST:-janusgraph}
      JANUSGRAPH_PORT: ${JANUSGRAPH_PORT:-8182}
      JANUSGRAPH_TIMEOUT: ${JANUSGRAPH_TIMEOUT:-30}
      JANUSGRAPH_RETRY_ATTEMPTS: ${JANUSGRAPH_RETRY_ATTEMPTS:-3}
      LLM_PROVIDER: ${LLM_PROVIDER:-tgi}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://ollama:11434}
      LLM_MODEL: ${LLM_MODEL:-llama3}
      TGI_BASE_URL: ${TGI_BASE_URL:-http://tgi:8080}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:3000}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      janusgraph:
        condition: service_started
      ollama-init:
        condition: service_completed_successfully
      init-app:
        condition: service_completed_successfully

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-true}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000/api}
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend

  postgres:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_system}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rag_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.9.0
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  cassandra:
    image: cassandra:4.1
    restart: unless-stopped
    environment:
      CASSANDRA_CLUSTER_NAME: janusgraph
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_NUM_TOKENS: 128
      MAX_HEAP_SIZE: 512M
      HEAP_NEWSIZE: 128M
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  janusgraph:
    image: janusgraph/janusgraph:1.0.0
    restart: unless-stopped
    env_file:
      - .env
    environment:
      JANUS_PROPS_TEMPLATE: cql-es
      janusgraph.storage.backend: cql
      janusgraph.storage.hostname: cassandra
      janusgraph.index.search.backend: elasticsearch
      janusgraph.index.search.hostname: elasticsearch
      janusgraph.index.search.elasticsearch.client-only: false
    ports:
      - "8182:8182"
    volumes:
      - janusgraph_data:/opt/janusgraph/data
    depends_on:
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  tgi:
    image: ghcr.io/huggingface/text-generation-inference:2.1
    restart: unless-stopped
    env_file:
      - .env
    platform: linux/amd64
    profiles: ["tgi"]
    environment:
      MODEL_ID: ${TGI_MODEL_ID:-mistralai/Mistral-7B-Instruct-v0.2}
      HF_TOKEN: ${HF_TOKEN:-}
      SHARD: ${TGI_NUM_SHARD:-1}
      MAX_BATCH_PREFILL_TOKENS: ${TGI_MAX_BATCH_PREFILL_TOKENS:-4096}
      MAX_INPUT_LENGTH: ${TGI_MAX_INPUT_LENGTH:-4096}
      MAX_TOTAL_TOKENS: ${TGI_MAX_TOTAL_TOKENS:-8192}
    ports:
      - "8080:8080"
    volumes:
      - tgi_cache:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # One-shot job to pull the chosen LLM model into Ollama
  ollama-init:
    image: ollama/ollama:latest
    restart: "no"
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - MODEL=llama3
    entrypoint: ["bash", "-lc"]
    command: ["bash", "-lc", "echo pulling $$MODEL ... && ollama pull $$MODEL"]

  # One-shot app initializer (DB seed, Qdrant index, JanusGraph facts)
  init-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: "no"
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-rag_system}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/rag_system}
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      JANUSGRAPH_HOST: ${JANUSGRAPH_HOST:-janusgraph}
      JANUSGRAPH_PORT: ${JANUSGRAPH_PORT:-8182}
      JANUSGRAPH_TIMEOUT: ${JANUSGRAPH_TIMEOUT:-30}
      JANUSGRAPH_RETRY_ATTEMPTS: ${JANUSGRAPH_RETRY_ATTEMPTS:-3}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      janusgraph:
        condition: service_started
    entrypoint: ["bash", "-lc"]
    command: "python init_all.py"

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 15s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  qdrant_storage:
  cassandra_data:
  elasticsearch_data:
  janusgraph_data:
  frontend_node_modules:
  ollama_data:
  tgi_cache:
