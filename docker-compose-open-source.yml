version: '3.8'

services:
  # PostgreSQL - główna baza danych
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: rag_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant - open source vector database (alternative to ChromaDB)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # JanusGraph - open source graph database (alternative to Neo4j)
  janusgraph:
    image: janusgraph/janusgraph:latest
    ports:
      - "8182:8182"
    volumes:
      - janusgraph_data:/opt/janusgraph/data
    environment:
      JANUSGRAPH_STORAGE_BACKEND: berkeleyje
      JANUSGRAPH_STORAGE_DIRECTORY: /opt/janusgraph/data
      JANUSGRAPH_CACHE_TTL: 60000
      JANUSGRAPH_QUERY_TIMEOUT: 30000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8182/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TGI (Text Generation Inference) - dla lokalnego Mistral 7B
  tgi:
    image: ghcr.io/huggingface/text-generation-inference:latest
    ports:
      - "8080:80"
    environment:
      - MODEL_ID=mistralai/Mistral-7B-Instruct-v0.2
      - MAX_BATCH_PREFILL_TOKENS=4096
      - MAX_BATCH_TOTAL_TOKENS=8192
      - MAX_INPUT_LENGTH=4096
      - MAX_TOTAL_TOKENS=8192
      - QUANTIZE=bitsandbytes
    volumes:
      - tgi_cache:/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama - alternatywa dla TGI (lżejsza)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate - alternative vector database
  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/meta"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Database
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rag_system
      
      # Vector Database
      - VECTOR_DB_TYPE=qdrant
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=fragments
      
      # Graph Database
      - JANUSGRAPH_HOST=janusgraph
      - JANUSGRAPH_PORT=8182
      - JANUSGRAPH_STORAGE_BACKEND=berkeleyje
      - JANUSGRAPH_STORAGE_DIRECTORY=/opt/janusgraph/data
      
      # Alternative Vector DBs
      - WEAVIATE_HOST=weaviate
      - WEAVIATE_PORT=8080
      - FAISS_INDEX_PATH=./faiss_index
      
      # LLM Configuration - using Ollama as primary provider
      - LLM_PROVIDER=ollama
      - LLM_MODEL=llama3.1:8b-instruct-q4_K_M
      - OLLAMA_BASE_URL=http://ollama:11434
      - TGI_BASE_URL=http://tgi:80
      
      # Embeddings
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      
      # Cache
      - REDIS_URL=redis://redis:6379
      
      # RAG Settings
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=200
      - TOP_K_RESULTS=5
      - SIMILARITY_THRESHOLD=0.7
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      janusgraph:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./vector_db:/app/vector_db
      - ./faiss_index:/app/faiss_index
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  qdrant_data:
  janusgraph_data:
  weaviate_data:
  redis_data:
  tgi_cache:
  ollama_data:

networks:
  default:
    name: knowledgebase_network



