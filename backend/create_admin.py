#!/usr/bin/env python3
"""
Skrypt do utworzenia domy≈õlnego administratora w systemie RAG
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from app.db.database import SessionLocal
from app.db.models import UserModel, UserRole, UserCreate
from app.services.auth_service import auth_service

def create_admin_user():
    """Tworzy domy≈õlnego administratora"""
    db = SessionLocal()
    
    try:
        # Sprawd≈∫ czy ju≈º istnieje administrator
        existing_admin = db.query(UserModel).filter(UserModel.role == "administrator").first()
        if existing_admin:
            print(f"Administrator ju≈º istnieje: {existing_admin.username}")
            print(f"Email: {existing_admin.email}")
            return
        
        # Dane domy≈õlnego administratora
        admin_data = UserCreate(
            username="admin",
            email="admin@system.local",
            password="admin123",  # ZMIE≈É TO W PRODUKCJI!
            full_name="Administrator Systemu",
            role=UserRole.ADMINISTRATOR
        )
        
        # Utw√≥rz administratora
        admin_user = auth_service.create_user(db, admin_data)
        
        print("üéâ Pomy≈õlnie utworzono administratora!")
        print(f"Username: {admin_user.username}")
        print(f"Email: {admin_user.email}")
        print(f"Rola: {admin_user.role}")
        print("\n‚ö†Ô∏è  WA≈ªNE: Zmie≈Ñ has≈Ço po pierwszym logowaniu!")
        print("   Domy≈õlne has≈Ço: admin123")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas tworzenia administratora: {str(e)}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üë§ Tworzenie domy≈õlnego administratora systemu RAG")
    print("=" * 50)
    create_admin_user()